import React from 'react';
import Card from '@material-ui/core/Card';
import CardHeader from '@material-ui/core/CardHeader';
import CardContent from '@material-ui/core/CardContent';
import CardActions from '@material-ui/core/CardActions';
import Avatar from '@material-ui/core/Avatar';
import { withStyles } from '@material-ui/core/styles';
import { CardWithCommentTypes } from './CardWithComment.props';
import MoreVertIcon from './icons/material/MoreVertIcon';
import MarkdownView from './lib/MarkdownView';
import IconButton from 'usr/form/IconButton.comp';
import Button from 'usr/form/Button.comp';

const styles = theme => ({
  actionAreaContainer: {
    display: 'flex',
    alignItems: 'center',
    width: '100%'
  },
  leftActionSection: {
    flexGrow: 1,
    display: 'flex',
    '& div:first-child': {
      marginLeft: 0,
    },
    '& div': {
      marginLeft: theme.spacing(1),
    },
    alignItems: 'center',
    justifyContent: 'flex-start',
  },
  rightActionSection: {
    flexGrow: 0,
    display: 'flex',
    '& div:last-child': {
      marginRight: 0,
    },
    '& div': {
      marginRight: theme.spacing(1),
    },
    alignItems: 'center',
    justifyContent: 'flex-end',
  }
});

/**
 * CardWithComment is generated by Webcodesk. Replace this comment with a valuable description.
 */
class CardWithComment extends React.Component {
  componentDidUpdate(prevProps, prevState, snapshot) {
  }

  handleButtonClick = id => e => {
    if (e) {
      e.stopPropagation();
      e.preventDefault();
    }
    this.props.onButtonClick({
      id
    });
  };

  createButtons = (actionArea, icons) => {
    const buttons = [];
    if (actionArea && actionArea.length > 0) {
      for (let i = 0; i < actionArea.length; i++) {
        const { id, buttonType, loading, disabled, iconButton, button } = actionArea[i];
        if (buttonType === 'iconButton') {
          const { iconIndex, size, color  } = iconButton;
          buttons.push(
            <div key={`actionButton${i}`}>
              <IconButton
                icon={icons[iconIndex]}
                size={size}
                color={color}
                loading={loading}
                disabled={disabled}
                onClick={this.handleButtonClick(id)}
              />
            </div>
          );
        } else if (buttonType === 'button') {
          const { label, startIconIndex, endIconIndex, size, variant, color } = button;
          buttons.push(
            <div key={`actionButton${i}`}>
              <Button
                startIcon={icons[startIconIndex]}
                endIcon={icons[endIconIndex]}
                loading={loading}
                variant={variant}
                color={color}
                size={size}
                label={label}
                disabled={disabled}
                onClick={this.handleButtonClick(id)}
              />
            </div>
          );
        }
      }
    }
    return buttons;
  };

  render() {
    const { classes, leftActionArea, rightActionArea, icons } = this.props;
    const leftButtons = this.createButtons(leftActionArea, icons);
    const rightButtons = this.createButtons(rightActionArea, icons);
    return (
      <Card>
        <CardHeader
          avatar={
            <Avatar aria-label="comment-avatar">
              A
            </Avatar>
          }
          action={
            <IconButton icon={<MoreVertIcon />} />
          }
          title="Commented by Alex"
          subheader="two days ago"
        >
        </CardHeader>
        <CardContent>
          <MarkdownView
            markdownContent={'## Test \n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'}
          />
        </CardContent>
        {(leftActionArea.length > 0 || rightActionArea.length > 0) && (
          <CardActions disableSpacing={true}>
            <div className={classes.actionAreaContainer}>
              {leftButtons.length > 0 && (
                <div className={classes.leftActionSection}>
                  {leftButtons}
                </div>
              )}
              {rightButtons.length > 0 && (
                <div className={classes.rightActionSection}>
                  {rightButtons}
                </div>
              )}
            </div>
          </CardActions>
        )}
      </Card>

    );
  }
}

CardWithComment.propTypes = CardWithCommentTypes;

CardWithComment.defaultProps = {
  leftActionArea: [
    { id: '001', buttonType: 'button', button: { label: 'Action1', startIconIndex: 0 } },
    { id: '002', buttonType: 'button', button: { label: 'Action2', startIconIndex: 1 } },
  ],
  rightActionArea: [{
    id: '003',
    buttonType: 'iconButton',
    iconButton: { iconIndex: 0 },
  }],
  onButtonClick: () => {
    console.info('CardWithComment.onButtonClick is not set');
  }
};

export default withStyles(styles)(CardWithComment);
