import * as firebase from "firebase/app";
import "firebase/auth";

let currentUser;

/**
 * This function is generated by Webcodesk. Replace this comment with a valuable description.
 *
 * @functionTypes {ListenToAuthStateChangedTypes from ./Auth.props}
 */
export const listenToAuthStateChanged = () => dispatch => {
  currentUser = null;
  firebase.auth().onAuthStateChanged(
    user => {
      if (user) {
        currentUser = user;
        dispatch({
          user,
          userIsSignedIn: true
        });
      } else {
        dispatch({userIsSignedOut: true});
      }
    },
    error => {
      dispatch({authStateError: error});
    },
  );
};

/**
 *
 * @functionTypes {GetCurrentUserTypes from ./Auth.props}
 */
export const getCurrentUser = () => dispatch => {
  if (currentUser) {
    dispatch({user: currentUser});
  } else {
    dispatch({userIsSignedOut: true});
  }
};

/**
 * Creates a new user account associated with the specified email address and password.
 * On successful creation of the user account, this user will also be signed in to your application.
 * User account creation can fail if the account already exists or the password is invalid.
 *
 * Note:
 * The email address acts as a unique identifier for the user and enables an email-based password reset.
 * This function will create a new user account and set the initial user password.
 *
 * @functionTypes {CreateUserWithEmailAndPasswordTypes from ./Auth.props}
 */
export const createUserWithEmailAndPassword = ({email, password}) => dispatch => {
  if (!email || email.length === 0) {
    dispatch({emptyEmail: true});
  }
  if (!password || password.length === 0) {
    dispatch({emptyPassword: true});
  }
  dispatch({status: 'processing'});
  firebase.auth().createUserWithEmailAndPassword(email, password)
    .then(user => {
      currentUser = user;
      dispatch({
        user,
        status: 'finished',
        userIsSignedIn: true
      });
    })
    .catch(error => {
      dispatch({
        weakPassword: error.code === 'auth/weak-password',
        emailAlreadyInUse: error.code === 'auth/email-already-in-use',
        invalidEmail: error.code === 'auth/invalid-email',
        operationIsNotAllowed: error.code === 'auth/operation-not-allowed',
        errorMessage: error.message,
        status: 'error',
      });
    });
};
